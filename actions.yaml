# Copyright 2024 Dwellir AB
# See LICENSE file for licensing details.

# Actions to get information about the node, container and charm
get-node-info:
  description: |
    Gets system information about the node and its container.
get-node-help:
  description: |
    Gets the help information from the client binary.
    Note that to get a readable output it is recommended to use '--format json' and parse the output with the 'jq' command line tool.
    Example Juju 2.x: juju run-action --wait polkadot/0 get-node-help --format json | jq -r '.["unit-polkadot-0"].results["help-output"]'
    Example Juju 3.x: juju run polkadot/0 get-node-help --format json | jq -r '.["polkadot/0"].results["help-output"]'
print-readme:
  description: |
    Prints the README file for the charm.

# Actions to manage the node service
restart-node-service:
  description: "This actions restarts the service running the blockchain node."
start-node-service:
  description: "This actions starts the service running the blockchain node."
stop-node-service:
  description: "This actions stops the service running the blockchain node."

# Actions to manage keys
get-session-key:
  description: "Runs author_rotateKeys and returns a new session-key."
has-session-key:
  description: "Checks if node has a session key, using an RPC call."
  params:
    key:
      description: "Key to check if exist on node. E.g. key='0xhjd39djk309'"
      type: string
  required: [ key ]
insert-key:
  description: |
    Inserts a key in the keystore of the node using a local RPC call. WARNING: don't do double signing by inserting the same key for two nodes!
    Keys are generated using the external tool subkey (not provided by the charm) E.g 'subkey generate --network efinity'
  params:
    mnemonic:
      description: "The private part of the key as a seed phrase. E.g. mnemonic='reunion learn town satisfy social split ticket improve sunset faculty tail adjust'"
      type: string
    address:
      description: "The public part of the key in hex format. E.g. address='0xf0014b9f4b10ac206a0f3ba9630e1df1f80214e7724e96ab00ccb35d08045777'"
      type: string
  required: [ mnemonic, address ]
set-node-key:
  description: |
    Sets a new private key in '/home/polkadot/node-key' and restarts the node service.
    A node key can be generated with the external tool subkey (not provided by the charm) E.g. `subkey generate-node-key --file node-key`.
    The content of node-key is the private key and what should be used for the 'key' parameter.
  params:
    key:
      description: Private node key.
      type: string
  required: [ key ]

# Actions to manage a validator node
find-validator-address:
  description: |
    Checks if this node is currently validating for any validator address found on-chain.
    It does so by checking if any session key on-chain is present on this node.
    Returns the validator address and the session key if this node is validating.
    This action does the same as the `update-status` hook does for a validator/collator.
    However, the `update-status` only shows if the node is validating or not, while this action also gives the validator address and the session key used.
is-validating-next-era:
  description: |
    Checks if this node will be validating next era for the validator address passed as parameter.
    It does so by checking if the session key that will be used for that validator is present on this node.
    Returns a message whether this node will be validating next era or not. If it will, the session key is returned as well.
  params:
    address:
      description: |
        The public address to check. E.g. DuLr6CeLXezrfumF6EkqLeAx9paMcADYU6zHpSZVB8gvjht
      type: string
  required: [ address ]
start-validating:
  description: |
    Makes this node start validating. It will use the config parameter 'mnemonic-secret-id' to sign the transaction and therefor start validating for that address.
    It does so by setting a new session key on-chain. The actual move of the validator might thus take some time to have effect.
    NOTE: Make sure the wallet is correct and has funds to pay for the transaction, or this will fail.

